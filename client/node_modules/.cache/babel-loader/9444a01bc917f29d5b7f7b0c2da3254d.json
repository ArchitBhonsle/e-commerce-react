{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firebase, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport function* fetchCollectionsAsync() {\n  const collectionRef = firestore.collection('collections');\n  dispatch(fetchCollectionsStart());\n  collectionRef.get().then(snapShot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/home/puipuituipui/Github/e-commerce-react/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","firebase","convertCollectionsSnapshotToMap","fetchCollectionsAsync","collectionRef","firestore","collection","dispatch","fetchCollectionsStart","get","then","snapShot","collectionsMap","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,QAAT,EAAmBC,+BAAnB,QAA0D,+BAA1D;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AACAC,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AAEAJ,EAAAA,aAAa,CACVK,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,UAAMC,cAAc,GAAGV,+BAA+B,CAACS,QAAD,CAAtD;AACAJ,IAAAA,QAAQ,CAACM,uBAAuB,CAACD,cAAD,CAAxB,CAAR;AACD,GALH,EAMGE,KANH,CAMUC,KAAD,IAAWR,QAAQ,CAACS,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAN5B;AAOD;AAED,OAAO,UAAUT,qBAAV,GAAkC;AACvC,QAAMT,SAAS,CAACC,eAAe,CAACkB,uBAAjB,EAA0Cf,qBAA1C,CAAf;AACD","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\n\nimport { firebase, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\nexport function* fetchCollectionsAsync() {\n  const collectionRef = firestore.collection('collections');\n  dispatch(fetchCollectionsStart());\n\n  collectionRef\n    .get()\n    .then((snapShot) => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapShot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    })\n    .catch((error) => dispatch(fetchCollectionsFailure(error.message)));\n}\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n"]},"metadata":{},"sourceType":"module"}